// src/renderer/blockly/image-classification-generators.js
'use strict';

// This helper ensures that the main AI data processing function is included
// in the final Python code if it hasn't been already.
function ensureImageClassificationProcessor() {
    if (!micropythonGenerator.functionNames_['process_face_landmark_data']) {
        // Create a placeholder if no other AI blocks have created the full function.
        // This is a safeguard. The robust parser will be generated by the main
        // helper function if any AI block is used.
        micropythonGenerator.definitions_['import_sys'] = 'import sys';
        micropythonGenerator.definitions_['import_ujson'] = 'import ujson as json';
        micropythonGenerator.definitions_['import_uselect'] = 'import uselect';
        micropythonGenerator.definitions_['ai_data_poller'] = 'poller = uselect.poll()\npoller.register(sys.stdin, uselect.POLLIN)';
        if (!micropythonGenerator.definitions_['ai_data_dict']) micropythonGenerator.definitions_['ai_data_dict'] = 'ai_data = {}';
        if (!micropythonGenerator.definitions_['ai_data_buffer']) micropythonGenerator.definitions_['ai_data_buffer'] = '_ai_data_buffer = ""';
        micropythonGenerator.functionNames_['process_face_landmark_data'] = `def process_face_landmark_data():\n    pass # Placeholder`;
    }
}

micropythonGenerator.forBlock['image_classification_enable'] = function(block) {
    return '# UI: Image classification enabled/disabled in browser.\n';
};

micropythonGenerator.forBlock['image_classification_is_class'] = function(block) {
    ensureImageClassificationProcessor();
    const objectClass = block.getFieldValue('CLASS');
    
    // Generates Python: ai_data.get('classification', {}).get('category', '') == 'banana'
    // The .get() calls with default values ({}, '') make the code safe to run
    // even if no classification data has been received yet.
    const code = `ai_data.get('classification', {}).get('category', '') == '${objectClass}'`;
    
    return [code, micropythonGenerator.ORDER_EQUALITY];
};

micropythonGenerator.forBlock['image_classification_get_class'] = function(block) {
    ensureImageClassificationProcessor();

    // Generates Python: ai_data.get('classification', {}).get('category', '')
    const code = `ai_data.get('classification', {}).get('category', '')`;
    
    return [code, micropythonGenerator.ORDER_FUNCTION_CALL];
};